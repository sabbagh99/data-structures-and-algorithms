/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackAndQueue;

import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class AppTest {
  @Test
  public void testStackAndQueue() {
    Stack stack = new Stack();
    stack.push(1);
    assertEquals("{1}", stack.toString()); //Can successfully push onto a stack
    stack.push(2);
    assertEquals("{2}{1}", stack.toString()); // Can successfully push multiple values onto a stack
    assertEquals(2, stack.pop());//Can successfully pop off the stack
    stack.pop();
    stack.pop();
    assertEquals("", stack.toString());//Can successfully empty a stack after multiple pops
    stack.push(3);
    assertEquals(3, stack.peek());//Can successfully peek the next item on the stack
    stack.pop();
    assertTrue(stack.isEmpty());//Can successfully instantiate an empty stack
    assertEquals(-1, stack.pop());//Calling pop or peek on empty stack raises exception
    assertEquals(-1, stack.peek());//Calling pop or peek on empty stack raises exception
//    ---------------------------------------------Queue Test-------------------------------------------------- -
    Queue queue = new Queue();
    queue.enqueue(1);
    assertEquals("{1}", queue.toString());//Can successfully enqueue into a queue
    queue.enqueue(2);
    assertEquals("{1}{2}", queue.toString());//Can successfully enqueue multiple values into a queue
    assertEquals(1, queue.dequeue()); //Can successfully dequeue out of a queue the expected value
    queue.enqueue(3);
    assertEquals(2, queue.peek());// Can successfully peek into a queue, seeing the expected value
    queue.dequeue();
    queue.dequeue();
    assertEquals("", queue.toString());//Can successfully empty a queue after multiple dequeues
    assertTrue(queue.isEmpty());//Can successfully instantiate an empty queue
    assertEquals(-1, queue.peek());//Calling dequeue or peek on empty queue raises exception
    assertEquals(-1, queue.dequeue());//Calling dequeue or peek on empty queue raises exception
  }
  @Test
  public void testPseudoQueue(){
    PseudoQueue pseudoQueue = new PseudoQueue();
  assertEquals("PseudoQueue{stackOne=, stackTwo=}",pseudoQueue.toString());
  pseudoQueue.enqueue(3);
  assertEquals("PseudoQueue{stackOne={3}, stackTwo=}",pseudoQueue.toString());
    pseudoQueue.enqueue(4);
    assertEquals("PseudoQueue{stackOne={4}{3}, stackTwo=}",pseudoQueue.toString());
    pseudoQueue.dequeue();
    assertEquals("PseudoQueue{stackOne=, stackTwo={4}}",pseudoQueue.toString());

  }
}
